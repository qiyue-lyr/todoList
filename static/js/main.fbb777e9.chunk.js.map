{"version":3,"sources":["createTodo.js","todoList.js","state.js","serviceWorker.js","index.js","app.js"],"names":["CreateTodo","props","data","setData","useEffect","ipt","document","querySelector","value","id","size","type","defaultValue","placeholder","autoComplete","onPressEnter","e","target","unshift","Date","now","text","done","TodoList","bordered","dataSource","renderItem","item","SingleList","key","editIndex","setIndex","inputEl","useRef","changeTodo","valname","val","map","changeText","current","input","focus","className","join","onDoubleClick","checked","onChange","status","changeStatus","onClick","filter","ref","onBlur","trim","todo","length","completed","CompletedShow","href","Boolean","window","location","hostname","match","ReactDOM","render","storage","localStorage","todos","getItem","JSON","parse","useState","setItem","stringify","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbb777e9.chunk.js","sourcesContent":["import React,{useEffect} from 'react';\r\nimport { Input } from 'antd';\r\n\r\nexport default function CreateTodo(props){\r\n   \r\n    const {data,setData} = props;\r\n\r\n    /* 在每次更新完成后，获取DOM节点，置空input内容 */\r\n    useEffect(()=>{\r\n        let ipt = document.querySelector('#create-todo input');\r\n        ipt && (ipt.value = \"\")    \r\n    })\r\n    \r\n    return (\r\n        <div id=\"create-todo\">\r\n            <Input\r\n                size=\"large\" \r\n                type=\"text\" \r\n                defaultValue=\"\"\r\n                placeholder=\"What needs to be done?\" \r\n                autoComplete=\"off\"\r\n                onPressEnter={(e)=>{\r\n                    \r\n                    if(e.target.value !== ''){\r\n                        // 添加一项todo\r\n                        data.unshift({\r\n                            id: Date.now(),\r\n                            text:e.target.value,\r\n                            done:false\r\n                        })\r\n\r\n                        setData([...data]);\r\n\r\n                        /* antd的Input组件，e.target.value可以获取，但不能赋值 = \"\"无效，暂时不知道原因 */\r\n                        // e.target.value = \"\";\r\n                    }\r\n                }}\r\n                \r\n            />\r\n        </div>\r\n    );\r\n    \r\n}","import React,{useRef, useEffect} from 'react';\r\nimport { List, Input, Checkbox  } from 'antd';\r\n\r\nexport default function TodoList(props){\r\n    \r\n        // console.log(\"todoList.js\");\r\n        const {data} = props;\r\n\r\n        return (\r\n            <div id=\"todo-list\">\r\n                <List\r\n                    bordered\r\n                    dataSource={data}\r\n                    renderItem={item =><SingleList {...props} item={item} key={item.id} />}\r\n                /> \r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nfunction SingleList(props){\r\n    // console.log(\"singleList.js\");\r\n\r\n    let {data,setData,editIndex,setIndex,item} = props;\r\n    const {id,text,done} = item;\r\n    \r\n    const inputEl = useRef(null);\r\n   \r\n    const changeTodo=(id,valname,val)=>{\r\n        return data.map(item=>{\r\n            if(item.id === id){\r\n                item[valname] = val;\r\n            }\r\n            return item;\r\n            \r\n        });\r\n    }\r\n\r\n    /* 改变某个todo的状态，是否完成 */\r\n    const changeStatus=(id,status)=>{\r\n        let data = changeTodo(id,'done',status);\r\n        setData(data);\r\n    }\r\n\r\n    /* 改变某个todo的内容 */\r\n    const changeText=(id,text)=>{\r\n        let data = changeTodo(id,'text',text);\r\n        setData(data); \r\n        setIndex(-1);// -1,没有todo需要编辑\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(editIndex === id){\r\n            \r\n            inputEl.current.input.focus();\r\n        }   \r\n    })\r\n       \r\n    return (\r\n        /* todo默认样式，done是否完成，editing是否处于可编辑状态 */\r\n        <li \r\n            className={[\"todo\", done ?\"done\":'', editIndex===id?\"editing\":''].join(\" \")}\r\n            onDoubleClick={()=>{\r\n                if(!done){\r\n                    setIndex(id);\r\n                }\r\n                return false;\r\n            }}\r\n        >\r\n            {/* 展示列 包含checkbox,文本,删除单项图标 */}\r\n            <div className=\"display\">\r\n                <Checkbox \r\n                    className=\"check\" \r\n                    type=\"checkbox\" \r\n                    checked={done} \r\n                    onChange={(e)=>{\r\n                        changeStatus(id,e.target.checked)\r\n                    }}                  \r\n                />\r\n                <span \r\n                    className=\"todo-content\"             \r\n                >{text}</span>\r\n                <span \r\n                    className=\"todo-destroy\"\r\n                    onClick={()=>{\r\n                        // 需注意，优先级：\"!\"(14) > \"===\"(9)\r\n                        data = data.filter(item=>!(item.id===id));                            \r\n                        setData(data);\r\n                    }}  \r\n                ></span>\r\n            </div>\r\n\r\n            <div className=\"edit\"> \r\n                {/* input需要加key，否则与text不同步，数据不准确 */}                \r\n                <Input  \r\n                    ref={inputEl}\r\n                    size=\"large\"\r\n                    className=\"todo-input\" \r\n                    type=\"text\" \r\n                    key={id}\r\n                    defaultValue={text} \r\n\r\n                    onBlur={(e)=>{\r\n                        e.target.value = text;\r\n                        setIndex(-1); \r\n                    }} \r\n                    onPressEnter={(e)=>{\r\n                        e.target.onBlur = null;\r\n                        let val = e.target.value.trim();\r\n                        if(val){\r\n                            changeText(id,val)\r\n                        }else{\r\n                            changeText(id,text)\r\n                        }                                    \r\n                    }}         \r\n                />\r\n\r\n            </div>\r\n        </li>\r\n    );\r\n    \r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function TodoList(props){\r\n    const {data} = props;\r\n\r\n    let todo = data.filter((item)=>!item.done).length\r\n    let completed = data.filter((item)=>item.done).length\r\n\r\n    \r\n    return (\r\n        <div id=\"todo-stats\">\r\n            <span className=\"todo-count\">\r\n                <span className=\"number\">{todo}</span>\r\n                <span className=\"word\">项待完成</span>\r\n                \r\n            </span> \r\n            <CompletedShow completed={completed} {...props}/>\r\n                \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\n/* 当已完成事项为0时，不显示 */\r\nfunction CompletedShow(props){\r\n    \r\n    let {completed,data,setData} = props;\r\n    if(completed){\r\n        return (\r\n            <span className=\"todo-clear\">\r\n                <a href=\"javascript:;\"\r\n                onClick={()=>{\r\n                    data = data.filter(item=>!item.done);\r\n                    setData(data)\r\n                }}\r\n                >\r\n                    Clear <span>{completed}</span> 已完成事项\r\n                </a>\r\n            </span>\r\n        )\r\n    }\r\n    return ''\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React,{useState, useEffect} from 'react';\r\nimport CreateTodo from './createTodo';\r\nimport TodoList from './todoList'\r\nimport State from './state';\r\nimport \"./app.css\";\r\n\r\nexport default function App(){\r\n    const storage = window.localStorage; \r\n\r\n    let todos = [];\r\n    // 如果本地存储有，就取出来作为data的初始值\r\n    if(storage.getItem('todos')){\r\n        todos = JSON.parse(storage.getItem('todos')).data;\r\n    }\r\n    \r\n    const [data,setData] = useState(todos);\r\n    const [editIndex,setIndex] = useState(-1);//可编辑的是哪一个todo\r\n\r\n    // 每次data更新后存储data到localStorage，注意：第二个参数本身必须是数组\r\n    useEffect(()=>{\r\n        let storage = window.localStorage;\r\n        let todo = {data}\r\n        storage.setItem('todos',JSON.stringify(todo))\r\n    },[data])\r\n\r\n    // console.log(\"app.js\");\r\n    \r\n  \r\n    return (\r\n        <div id=\"todolist\">\r\n            <h1>todos</h1>\r\n            \r\n            <div className=\"content\">\r\n                <CreateTodo data={data} setData={setData}/>\r\n                {data.length ? <TodoList  \r\n                                data={data} \r\n                                setData={setData} \r\n                                editIndex={editIndex} \r\n                                setIndex={setIndex}/>:''}\r\n                {data.length ? <State data={data} setData={setData}/>:''}\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}